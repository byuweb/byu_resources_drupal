<?php
/**
* @file
* Pulls information about web components and Drupal modules developed by BYU.
*/

use Drupal\node\Entity\Node;
use Drupal\Core\Render\Element;

/**
 * Implements hook_preprocess_html()
 * @param $variables
 */

function byu_resources_preprocess_html(&$variables) {
  if ($variables['root_path'] == 'byu-resources') {
    $variables['#attached']['library'] = 'byu_resources/default';
  }

  // Set a warning message if the parsedown library doesn't exist. This is required so that the documentation text is parsed correctly.
  // The library is found at https://github.com/erusev/parsedown

  if(!file_exists(drupal_get_path('module', 'byu_resources') . '/vendor/erusev/parsedown/Parsedown.php')) {
    drupal_set_message('The module BYU Resources requires the Parsedown library to work properly. Please run composer install in the module directory.', 'warning');
  }
}

/**
 * Implements hook_preprocess_node()
 * @param $variables
 */

function byu_resources_preprocess_node(&$variables) {
  $type = $variables['node']->bundle();
  if ($type == 'byu_resource') {
    $variables['#attached']['library'] = 'byu_resources/default';
  }
}

/**
 * Implements hook_theme()
 * @return mixed
 */

function byu_resources_theme() {
  $theme['node__view__byu_resources'] = [
    'template' => 'node--view--byu-resources'
  ];
  $theme['field__field_byu_source_code_link'] = [
    'template' => 'field--field-byu-source-code-link'
  ];
  $theme['field__field_byu_resource_download_link'] = [
    'template' => 'field--field-byu-resource-download-link'
  ];
  $theme['field__field_byu_resource_demo_link'] = [
    'template' => 'field--field-byu-resource-demo-link'
  ];
  return $theme;
}

/**
 * @param $variables - Variables to be used in the template.
 */

function template_preprocess_node__view__byu_resources(&$variables) {
  foreach (Element::children($variables['elements']) as $key) {
    $variables['content'][$key] = $variables['elements'][$key];
  }
}

/**
 * @param $variables - Variables that are used in the template
 */

function template_preprocess_field__field_byu_source_code_link(&$variables) {
  $variables['url'] = $variables['element'][0]['#url']->getUri();
  $variables['title'] = 'Source Code';
}

/**
 * @param $variables - Variables that are used in the template
 */

function template_preprocess_field__field_byu_resource_download_link(&$variables) {
  $variables['url'] = $variables['element'][0]['#url']->getUri();
  $variables['title'] = 'Download';
}

/**
 * @param $variables - Variables that are used in the template
 */

function template_preprocess_field__field_byu_resource_demo_link(&$variables) {
  $variables['url'] = $variables['element'][0]['#url']->getUri();
  $variables['title'] = 'Demo';
}

/**
 * Implements hook_cron()
 */

function byu_resources_cron() {
  /** Functions below for debugging purposes. */
  get_web_components();
  get_drupal_modules();

  $tomorrow = new DateTime("tomorrow");
  $tomorrow = $tomorrow->getTimestamp();
  $requestTime = \Drupal::time()->getRequestTime();
  $interval = \Drupal::config('automated_cron.settings')->get('interval');
  if ($tomorrow - $requestTime < $interval || $interval > 86400) {
    get_web_components();
  }
}

/**
 * This function takes the machine like name of the component and makes it look more like a title.
 * @param $input
 * @return mixed|string
 */

function make_title($input) {
  $input = str_replace('-', ' ', $input);
  $input = str_replace('_', ' ', $input);
  $input = str_replace('byu', 'BYU', $input);
  $input = ucwords($input);
  return $input;
}

/**
 * This function fetches the machine names of all the existing resources. This is used to
 * make sure no duplicate byu resource nodes are made.
 * @return array - An array containing all the machine names of the existing BYU resources.
 */

function get_existing_resources() {
  $nids = \Drupal::entityQuery('node')->condition('type','byu_resource')->execute();
  $nodes = Node::loadMultiple($nids);
  $names = [];
  foreach ($nodes as $node) {
    $names[] = $node->get('field_byu_resource_machine_name')->getValue()[0];
  }
  return $names;
}

/**
 * This function fetches the web components and then adds a BYU Resource node for
 * each one if it doesn't already exist.
 */

function get_web_components() {
  // Get the initial JSON
  $json = file_get_contents('https://cdn.byu.edu/manifest.json');
  $json = json_decode($json);

  // Load the existing BYU resources for later use.
  $names = get_existing_resources();

  // Load the module path
  $modulePath = drupal_get_path('module', 'byu_resources');

  // Get the HTML 5 logo
  $imagePath = $modulePath . '/icons/html-200px.png';
  $imageData = file_get_contents($imagePath);
  $image = file_save_data($imageData, 'public://html-200px.png', FILE_EXISTS_REPLACE);

  foreach($json->libraries as $library => $item) {
    if ($item->type == 'web-component') {

      // Set all the variables for the fields.
      $sourceURL = $item->links->source;
      $downloadURL = $sourceURL . '/archive/master.zip';
      $parts = explode('/', $sourceURL);
      $machineName = $parts[count($parts) - 1];
      $nodeName = make_title($machineName);
      $description = $item->description;


      // Load and parse the readme.
      include_once($modulePath . "/vendor/erusev/parsedown/Parsedown.php"); // Library for parsing markdown text.
      $Parsedown = new Parsedown();
      $readmeLink = $item->links->readme;
      $readme = file_get_contents($readmeLink);
      $readme = $Parsedown->text($readme);

      // Check to see if resource already exists.
      $resourceExists = false;
      foreach($names as $name) {
        if ($machineName == $name['value']) {
          $resourceExists = true;
        }
      }

      // Check for deprecation
      if ($item->deprecated) $nodeName .= ' DEPRECATED';

      // Create the BYU Resource
      if (!$resourceExists) {
        $node = Node::create([
          'type' => 'byu_resource',
          'title' => $nodeName,
          'field_byu_resource_cms_icon' => [
            'target_id' => $image->id(),
            'alt' => 'HTML 5 Logo',
            'title' => 'HTML 5'
          ],
          'field_byu_resource_classes' => 'gray-title',
          'field_byu_resource_maintainer' => 'Web Community',
          'field_byu_resource_contact' => 'web_community@byu.edu',
          'field_byu_resource_cms' => 'HTML 5',
          'field_byu_resource_resource_type' => 'Web Component',
          'field_byu_resource_machine_name' => $machineName,
          'field_byu_resource_description' => $description,
          'field_byu_resource_readme' => [
            'value' => $readme,
            'format' => 'markdown'
          ],
          'field_byu_source_code_link' => $sourceURL,
          'field_byu_resource_download_link' => $downloadURL
        ]);
//        $node->field_byu_resource_readme->format = 'markdown';
        try {
          $node->save();
        } catch (Exception $e) {
          drupal_set_message('Caught exception: ' . $e->getMessage(), 'error');
        }
      }
    }
  }
}

/**
 * Parses the html pulled from drupal.org to get the machine names nad regular names of all the
 * BYU drupal modules.
 *
 * @param $input string - Raw html from drupal.org
 * @return array Contains machine names and titles of modules.
 */

function parse_drupal_org($input) {
  $lastPosition = strpos($input, '<h4 id="projects-supported">');
  $modules = [
    'machine_name' => [],
    'link' => [],
    'title' => []
  ];
  $endPosition = strpos($input, '</p>', $lastPosition) + strlen('</p>');
  $input = substr($input, $lastPosition, $endPosition - $lastPosition);
  $lastPosition = 0;
  $nextPosition = strpos($input, '/project/') + strlen('/project/');

  while ($nextPosition >= $lastPosition) {
    $lastPosition = strpos($input, '"', $nextPosition);
    $modules['machine_name'][] = substr($input, $nextPosition, $lastPosition - $nextPosition) . ' | ';

//    $modules['link'][] = 'https://www.drupal.org/project/' . $modules['machine_name'][$i];

    $nextPosition = strpos($input, '>', $lastPosition) + 1;
    $lastPosition = strpos($input, '</a>', $nextPosition);
    $modules['title'][] = substr($input, $nextPosition, $lastPosition - $nextPosition) . ' | ';

    $nextPosition = strpos($input, '/project/', $lastPosition) + strlen('/project/');
  }

  return $modules;
}

/**
 * This function fetches the drupal modules from drupal.org. You still have to manually add the machine names of the
 * modules to the array below.
 */

function get_drupal_modules() {
  $client = \Drupal::service('http_client');
  $result = $client->get('https://www.drupal.org/brigham-young-university');
  $output = $result->getBody()->getContents();

  $byu = parse_drupal_org($output);
//  $byu = parse_drupal_org($output);
}