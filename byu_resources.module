<?php
/**
* @file
* Pulls information about web components and Drupal modules developed by BYU.
*/

use Drupal\node\Entity\Node;
use Drupal\Core\Render\Element;

/**
 * Implements hook_theme()
 * @return mixed
 */

function byu_resources_theme() {
  $theme['node__view__byu_resources'] = [
    'template' => 'node--view--byu-resources'
  ];
  return $theme;
}

/**
 * @param $variables - Adds variables to be used in the template.
 */

function template_preprocess_node__view__byu_resources(&$variables) {
  foreach (Element::children($variables['elements']) as $key) {
    $variables['content'][$key] = $variables['elements'][$key];
  }
}

/**
 * Implements hook_cron()
 */

function byu_resources_cron() {
  // Put the code for updating the nodes with the resources in here.
//  get_web_components();
}

/**
 * This function takes the machine like name of the component and makes it look more like a title.
 * @param $input
 * @return mixed|string
 */

function make_title($input) {
  $input = str_replace('-', ' ', $input);
  $input = str_replace('byu', 'BYU', $input);
  $input = ucwords($input);
  return $input;
}

/**
 * This function takes markdown text and converts it to html.
 * @param $input - Input string to be decoded.
 * @return string - Fully formatted html.
 */

function markdown_decode($input) {
  $stringArray = explode("\n", $input);
  $result = '';
  $preformatted = false;
  foreach ($stringArray as $line) {
    $header = false;
    // Preformatted text
    if (substr($line, 0, 3) == '```') {
      $line = htmlspecialchars($line);
      if (!$preformatted) {
        $line = preg_replace('/```/', '<pre>', $line, 1);
        $preformatted = true;
        $result .= $line;
      }
      else {
        $line = preg_replace('/```/', '</pre>', $line, 1);
        $preformatted = false;
        $result .= $line;
      }
    }
    else if($preformatted) {
      $line = htmlspecialchars($line) . "\n";
      $result .= $line;
    }

    // Find other formatting if not preformatted.
    if (!$preformatted) {
      // Headers
      if (substr($line, 0, 6) == '######') {
        $line = str_replace('###### ', '<h6>', $line);
        $result .= $line . '</h6>';
        $header = true;
      } else if (substr($line, 0, 5) == '#####') {
        $line = str_replace('##### ', '<h5>', $line);
        $result .= $line . '</h5>';
        $header = true;
      } else if (substr($line, 0, 4) == '####') {
        $line = str_replace('#### ', '<h4>', $line);
        $result .= $line . '</h4>';
        $header = true;
      } else if (substr($line, 0, 3) == '###') {
        $line = str_replace('### ', '<h3>', $line);
        $result .= $line . '</h3>';
        $header = true;
      } else if (substr($line, 0, 2) == '##') {
        $line = str_replace('## ', '<h2>', $line);
        $result .= $line . '</h2>';
        $header = true;
      } else if (substr($line, 0, 1) == '#') {
        $line = str_replace('# ', '<h1>', $line);
        $result .= $line . '</h1>';
        $header = true;
      }

      // Inline Code
      if (strpos($line, '`')) {
        $line = htmlspecialchars($line);
        while (strpos($line, '`')) {
          $line = preg_replace('/`/', '<code>', $line, 1);
          $line = preg_replace('/`/', '</code>', $line, 1);
        }
      }

      // Bold and Italics
      if (strpos($line, '**') || strpos($line, '__')) {
        while (strpos($line, '**')) {
          $line = preg_replace('/\*\*/', '<strong>', $line, 1);
          $line = preg_replace('/\*\*/', '</strong>', $line, 1);
        }
        while (strpos($line, '__')) {
          $line = preg_replace('/__/', '<strong>', $line, 1);
          $line = preg_replace('/__/', '</strong>', $line, 1);
        }
      }
      else if (strpos($line, '*') || strpos($line, '_')) {
        while (strpos($line, '*')) {
          $line = preg_replace('/\*/', '<em>', $line, 1);
          $line = preg_replace('/\*/', '</em>', $line, 1);
        }
        while (strpos($line, '_')) {
          $line = preg_replace('/_/', '<em>', $line, 1);
          $line = preg_replace('/_/', '</em>', $line, 1);
        }
      }
    }

    // If no formatting took place, add the line.
    if (!$header && !$preformatted) {
      $result .= '<p>' . $line . '</p>';
    }
  }
  return $result;
}

/**
 * This function fetches the web components and then adds a BYU Resource node for each one.
 */

function get_web_components() {
  $json = file_get_contents('https://cdn.byu.edu/manifest.json');
  $json = json_decode($json);
  foreach($json->libraries as $library => $item) {
    if ($item->type == 'web-component') {

      // Set all the variables for the fields.
      $sourceURL = $item->links->source;
      $parts = explode('/', $sourceURL);
      $nodeName = $parts[count($parts) - 1];
      $nodeName = make_title($nodeName);
      $readme = file_get_contents($item->links->readme);
      $readme = markdown_decode($readme);
      $description = $item->description;

      // Check for deprecation
      if ($item->deprecated) $nodeName .= ' DEPRECATED';

      // Create the BYU Resource
      $node = Node::create([
        'type' => 'byu_resource',
        'title' => $nodeName,
        'field_byu_resource_cms_icon' => [
          'fid' => 'upload',
          'filepath' => './icons/html5-200px.png',
        ],
        'field_byu_resource_classes' => 'gray-title',
        'field_byu_resource_maintainer' => 'Web Community',
        'field_byu_resource_contact' => 'web_community@byu.edu',
        'field_byu_resource_cms' => 'HTML 5',
        'field_byu_resource_resource_type' => 'Web Component',
        'field_byu_resource_description' => $description,
        'field_byu_resource_readme' => $readme,
        'field_byu_source_code_link' => $sourceURL
      ]);
      try {
        $node->save();
      }
      catch(Exception $e) {
        drupal_set_message('Caught exception: ' . $e->getMessage() . '\n', 'error');
      }
    }
  }
}